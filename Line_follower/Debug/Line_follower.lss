
Line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000a8  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000a2  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000006b  00000000  00000000  0000095b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000e2  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000097  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB=0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRC=0X00;
  70:	14 ba       	out	0x14, r1	; 20
    while(1)
    {
       int x=PINC & 0b00000101;

       if(x==0b00000101)
       PORTB=0b00001010;
  72:	2a e0       	ldi	r18, 0x0A	; 10

       else if(x==0b00000001)
       PORTB=0b00000110;

       else if(x==0b00000100)
       PORTB=0b00001001;
  74:	49 e0       	ldi	r20, 0x09	; 9

       if(x==0b00000101)
       PORTB=0b00001010;

       else if(x==0b00000001)
       PORTB=0b00000110;
  76:	36 e0       	ldi	r19, 0x06	; 6
{
	DDRB=0XFF;
	DDRC=0X00;
    while(1)
    {
       int x=PINC & 0b00000101;
  78:	83 b3       	in	r24, 0x13	; 19
  7a:	85 70       	andi	r24, 0x05	; 5
  7c:	90 e0       	ldi	r25, 0x00	; 0

       if(x==0b00000101)
  7e:	85 30       	cpi	r24, 0x05	; 5
  80:	91 05       	cpc	r25, r1
  82:	11 f4       	brne	.+4      	; 0x88 <main+0x1c>
       PORTB=0b00001010;
  84:	28 bb       	out	0x18, r18	; 24
  86:	f8 cf       	rjmp	.-16     	; 0x78 <main+0xc>

       else if(x==0b00000001)
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	91 05       	cpc	r25, r1
  8c:	11 f4       	brne	.+4      	; 0x92 <main+0x26>
       PORTB=0b00000110;
  8e:	38 bb       	out	0x18, r19	; 24
  90:	f3 cf       	rjmp	.-26     	; 0x78 <main+0xc>

       else if(x==0b00000100)
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	91 05       	cpc	r25, r1
  96:	11 f4       	brne	.+4      	; 0x9c <main+0x30>
       PORTB=0b00001001;
  98:	48 bb       	out	0x18, r20	; 24
  9a:	ee cf       	rjmp	.-36     	; 0x78 <main+0xc>

       else if(x==0b00000000)
  9c:	89 2b       	or	r24, r25
  9e:	61 f7       	brne	.-40     	; 0x78 <main+0xc>
       PORTB=0X00;
  a0:	18 ba       	out	0x18, r1	; 24
  a2:	ea cf       	rjmp	.-44     	; 0x78 <main+0xc>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
